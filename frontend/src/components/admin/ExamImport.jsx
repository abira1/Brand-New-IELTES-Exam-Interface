import React, { useState } from 'react';
import { Upload, FileJson, CheckCircle, XCircle, Loader2, ArrowRight } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { Button } from '../ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Alert, AlertDescription } from '../ui/alert';
import functionsService from '../../services/functionsService';
import PromptGenerator from './PromptGenerator';

export default function ExamImport() {
  const [selectedFile, setSelectedFile] = useState(null);
  const [examTitle, setExamTitle] = useState('');
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.name.endsWith('.json')) {
        setSelectedFile(file);
        setError(null);
        setResult(null);
        
        // Extract exam title from filename if not set
        if (!examTitle) {
          const name = file.name.replace('.json', '').replace(/_/g, ' ');
          setExamTitle(name);
        }
        
        // Try to read JSON and extract title
        const reader = new FileReader();
        reader.onload = (event) => {
          try {
            const json = JSON.parse(event.target.result);
            if (json.title && !examTitle) {
              setExamTitle(json.title);
            }
          } catch (err) {
            // Ignore parse errors here, will validate on upload
          }
        };
        reader.readAsText(file);
      } else {
        setError('Please select a JSON file');
        setSelectedFile(null);
      }
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      setError('Please select a file');
      return;
    }

    if (!examTitle.trim()) {
      setError('Please enter an exam title');
      return;
    }

    setUploading(true);
    setError(null);
    setResult(null);
    setUploadProgress(0);

    try {
      // Simulate progress for better UX
      const progressInterval = setInterval(() => {
        setUploadProgress((prev) => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 500);

      const response = await functionsService.uploadJson(selectedFile, examTitle);

      clearInterval(progressInterval);
      setUploadProgress(100);

      if (response.success) {
        setResult({
          success: true,
          examId: response.data.examId,
          message: response.data.message,
          details: response.data.data,
        });
        
        // Reset form
        setSelectedFile(null);
        setExamTitle('');
        
        // Reset file input
        const fileInput = document.getElementById('json-file-input');
        if (fileInput) fileInput.value = '';
      } else {
        setError(response.error || 'Upload failed');
      }
    } catch (err) {
      setError(err.message || 'An unexpected error occurred');
    } finally {
      setUploading(false);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      const file = files[0];
      if (file.name.endsWith('.json')) {
        setSelectedFile(file);
        setError(null);
        
        if (!examTitle) {
          const name = file.name.replace('.json', '').replace(/_/g, ' ');
          setExamTitle(name);
        }
        
        // Try to read JSON and extract title
        const reader = new FileReader();
        reader.onload = (event) => {
          try {
            const json = JSON.parse(event.target.result);
            if (json.title && !examTitle) {
              setExamTitle(json.title);
            }
          } catch (err) {
            // Ignore parse errors here
          }
        };
        reader.readAsText(file);
      } else {
        setError('Please drop a JSON file');
      }
    }
  };

  return (
    <div className="space-y-6">
      {/* AI Prompt Generator */}
      <PromptGenerator />
      
      <Card>
        <CardHeader>
          <CardTitle>Import IELTS Exam from JSON</CardTitle>
          <CardDescription>
            Upload a JSON file generated by AI (DeepSeek, ChatGPT) containing structured exam questions
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Exam Title Input */}
          <div className="space-y-2">
            <Label htmlFor="exam-title">Exam Title</Label>
            <Input
              id="exam-title"
              placeholder="e.g., IELTS Academic Practice Test 1"
              value={examTitle}
              onChange={(e) => setExamTitle(e.target.value)}
              disabled={uploading}
            />
          </div>

          {/* File Upload Area */}
          <div
            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
              selectedFile ? 'border-green-500 bg-green-50' : 'border-gray-300 hover:border-gray-400'
            }`}
            onDragOver={handleDragOver}
            onDrop={handleDrop}
          >
            <input
              id="json-file-input"
              type="file"
              accept=".json"
              onChange={handleFileChange}
              className="hidden"
              disabled={uploading}
            />
            
            <label htmlFor="json-file-input" className="cursor-pointer">
              <div className="flex flex-col items-center space-y-4">
                {selectedFile ? (
                  <>
                    <FileJson className="w-16 h-16 text-green-500" />
                    <div>
                      <p className="text-lg font-medium text-green-700">{selectedFile.name}</p>
                      <p className="text-sm text-gray-500">
                        {(selectedFile.size / 1024).toFixed(2)} KB
                      </p>
                    </div>
                    {!uploading && (
                      <Button
                        type="button"
                        variant="outline"
                        onClick={(e) => {
                          e.preventDefault();
                          setSelectedFile(null);
                          const fileInput = document.getElementById('json-file-input');
                          if (fileInput) fileInput.value = '';
                        }}
                      >
                        Remove File
                      </Button>
                    )}
                  </>
                ) : (
                  <>
                    <Upload className="w-16 h-16 text-gray-400" />
                    <div>
                      <p className="text-lg font-medium">Drop JSON file here or click to browse</p>
                      <p className="text-sm text-gray-500">AI-generated exam data in JSON format</p>
                    </div>
                  </>
                )}
              </div>
            </label>
          </div>

          {/* Upload Progress */}
          {uploading && (
            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span>Uploading and processing...</span>
                <span>{uploadProgress}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${uploadProgress}%` }}
                />
              </div>
            </div>
          )}

          {/* Upload Button */}
          <Button
            onClick={handleUpload}
            disabled={!selectedFile || uploading || !examTitle.trim()}
            className="w-full"
          >
            {uploading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Processing JSON...
              </>
            ) : (
              <>
                <Upload className="mr-2 h-4 w-4" />
                Import Exam
              </>
            )}
          </Button>

          {/* Error Alert */}
          {error && (
            <Alert variant="destructive">
              <XCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {/* Success Alert */}
          {result && result.success && (
            <Alert className="bg-green-50 border-green-200">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <AlertDescription>
                <div className="space-y-4">
                  <div>
                    <p className="font-medium text-green-800 text-lg">{result.message}</p>
                  </div>

                  {/* Exam Details */}
                  {result.details && (
                    <div className="bg-white rounded p-3 border border-green-200">
                      <p className="font-medium text-gray-800 mb-2">Exam Details:</p>
                      <div className="text-sm text-gray-700 space-y-1">
                        <p><strong>Title:</strong> {result.details.title}</p>
                        <p><strong>Total Questions:</strong> {result.details.totalQuestions}</p>
                        {result.details.sections && result.details.sections.length > 0 && (
                          <p><strong>Sections:</strong> {result.details.sections.map(s => s.name).join(', ')}</p>
                        )}
                        <p className="text-xs text-gray-500 mt-2"><strong>Exam ID:</strong> {result.examId}</p>
                      </div>
                    </div>
                  )}

                  {/* Next Steps */}
                  <div className="bg-white rounded p-3 border border-green-200">
                    <p className="font-medium text-gray-800 mb-2">Next Steps:</p>
                    <ol className="text-sm text-gray-700 space-y-1 list-decimal list-inside">
                      <li>Go to Exam Management</li>
                      <li>Click the <strong>[Publish]</strong> button</li>
                      <li>Click the <strong>[Activate]</strong> button</li>
                      <li>Click the <strong>[Make Visible]</strong> button</li>
                      <li>Students can now see and take the exam!</li>
                    </ol>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex gap-2 pt-2">
                    <Button
                      onClick={() => {
                        // Close the import form and refresh the exam list
                        setResult(null);
                        setSelectedFile(null);
                        setExamTitle('');
                        const fileInput = document.getElementById('json-file-input');
                        if (fileInput) fileInput.value = '';
                        // Trigger parent component to show exam list
                        window.dispatchEvent(new CustomEvent('closeImportForm'));
                      }}
                      className="bg-green-600 hover:bg-green-700 flex-1"
                    >
                      <ArrowRight className="mr-2 h-4 w-4" />
                      Go to Exam Management
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => {
                        setResult(null);
                        setSelectedFile(null);
                        setExamTitle('');
                        const fileInput = document.getElementById('json-file-input');
                        if (fileInput) fileInput.value = '';
                      }}
                    >
                      Close
                    </Button>
                  </div>
                </div>
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {/* Help Section */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">JSON File Requirements</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="list-disc list-inside space-y-2 text-sm text-gray-600">
            <li>JSON must be generated using the AI prompts provided above</li>
            <li>Supports Listening, Reading, and Writing sections</li>
            <li>All 40+ IELTS question types are auto-detected</li>
            <li>Strict schema validation with flexible type handling</li>
            <li>After import, exam will be in "draft" status - publish when ready</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}
